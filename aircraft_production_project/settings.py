"""
Django settings for aircraft_production_project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from dotenv import load_dotenv
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent # Projenin kök dizini
env_path = os.path.join(os.path.dirname(BASE_DIR), '.env')
load_dotenv() # .env dosyasını yüklemek için bu satırı ekleyin

SECRET_KEY = os.getenv('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    # Django'nun standart uygulamaları
    'django.contrib.admin', # Yönetim paneli
    'django.contrib.auth', # Kimlik doğrulama sistemi
    'django.contrib.contenttypes', # İçerik tipleri framework'ü
    'django.contrib.sessions', # Oturum yönetimi
    'django.contrib.messages', # Mesajlaşma framework'ü
    'django.contrib.staticfiles', # Statik dosyaların yönetimi

    # Üçüncü parti uygulamalar
    'rest_framework', # Django REST framework, API oluşturmak için
    'rest_framework.authtoken', # Token bazlı kimlik doğrulama için DRF eklentisi
    'django_filters', # API'lerde gelişmiş filtreleme için
    'drf_spectacular',  # API dokümantasyonu (Swagger/OpenAPI) oluşturmak için
    # Kendi uygulamalarımız
    'aircraft_production_app', # Ana üretim uygulamamız
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'aircraft_production_project.urls' # Projenin ana URL yapılandırma dosyası

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'aircraft_production_project.wsgi.application' # WSGI sunucuları için uygulama giriş noktası


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'tr-tr'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/' # Statik dosyaların sunulacağı URL ön eki

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' # Yeni modeller için varsayılan primary key tipi

# Django REST Framework Ayarları
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication', # API için varsayılan kimlik doğrulama yöntemi
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', # Varsayılan olarak tüm API endpoint'leri kimlik doğrulaması gerektirir
    ],
    'DEFAULT_PAGINATION_CLASS': 'aircraft_production_app.pagination.StandardDataTablePagination', # DataTables ile uyumlu özel sayfalama sınıfı
    'PAGE_SIZE': 10, # Sayfalama için varsayılan kayıt sayısı (StandardDataTablePagination bunu override edebilir)
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend', # django-filter kütüphanesi ile filtreleme
        'rest_framework.filters.OrderingFilter',   # ?ordering=... ile sıralama
        'rest_framework.filters.SearchFilter',     # ?search=... ile arama
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', # drf-spectacular için varsayılan şema sınıfı
}

# drf-spectacular Ayarları (API Dokümantasyonu için)
SPECTACULAR_SETTINGS = {
    'TITLE': 'Hava Aracı Üretim API', # API dokümantasyonunun başlığı
    'DESCRIPTION': 'Hava aracı üretim ve takip sistemi için geliştirilmiş API dokümantasyonu.', # API açıklaması
    'VERSION': '1.0.0', # API versiyonu
    'SERVE_INCLUDE_SCHEMA': False,  # True yapılırsa /api/schema/ altında schema.yaml da sunulur
    # 'SWAGGER_UI_DIST': 'SIDECAR',  # Swagger UI dosyalarını projenizle birlikte sunmak için (CDN yerine)
    # 'SWAGGER_UI_SETTINGS': {
    #     'deepLinking': True,
    #     'persistAuthorization': True,
    #     'displayOperationId': True,
    # },
    'COMPONENT_SPLIT_REQUEST': True, # Request body'lerini component olarak ayırır, daha okunabilir
    'COMPONENT_SPLIT_PATCH': True,   # PATCH request body'lerini de component olarak ayırır
}
